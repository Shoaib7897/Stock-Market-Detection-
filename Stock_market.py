# -*- coding: utf-8 -*-
"""Copy of MINI_PROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rJjB9IYpmj6O2ErKGIWb_5hts4c3-bwO
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, Dropout
from keras.layers import GRU, LSTM
import pandas_datareader as web
import datetime
from datetime import datetime
from datetime import timedelta #i have added this line

# !pip install matplotlib==3.0.3

#stk = input("ENTER THE STOCK WHICH YOU WANT TO PREDICT ") #for eg GOOG FOR GOOGLE

#print(stk)

ticker = ['GOOG'] 

# To Set up End and Start times for data grab
end = datetime.now() # need to reduce the day by 30
print(end)
end2 =end+ timedelta(-90)
print(end2)
start = datetime(end2.year - 5,end2.month,end2.day)
# Creating loop for grabing yahoo finance data and setting as a dataframe
for stock in ticker:   
#     #To set DataFrame as the Stock Ticker
    globals()[stock] = web.DataReader(stock,'yahoo',start,end2)['Close']


print(stock)

GOOG.isnull().values.any()# HANDLING THE NULL VALUES IN OUR PROGRAM
train=GOOG.values
train2=GOOG.values#null values exception
##print(train)
#print(len(train))

plt.plot(train,color='blue',label='real stock prices')
#plt.plot(ans,color='red',label='predicted stock prices')
plt.title("stock market prediction using LSTM")
plt.xlabel("time")
plt.ylabel("prices in dollars")
plt.legend()
plt.show()

#normalization of values
sc = MinMaxScaler(feature_range = (0, 1))
train = sc.fit_transform(train.reshape(-1,1))
#training data
x_train=train[0:len(train)-1]#null values #dynamic modeliing
y_train=train[1:len(train)]

from keras import optimizers
x_train=np.reshape(x_train,(len(train)-1, 1 ,-1 ))  #batch size, timesteps, features
regressor = Sequential()
regressor.add(LSTM(units = 50, return_sequences = True, input_shape = (x_train.shape[1], 1)))
regressor.add(Dropout(0.2)) #overfitting ruki
regressor.add(LSTM(units = 50, return_sequences = True))
regressor.add(Dropout(0.2)) #overfitting prevented
#regressor.add(LSTM(units = 50, return_sequences = True))
#regressor.add(Dropout(0.2)) #OVERFITTING PREVENTED
regressor.add(LSTM(units = 50))
regressor.add(Dropout(0.2))#OVERFITTING PREVENTED
regressor.add(Dense(units = 1))
regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')
regressor.fit(x_train, y_train, epochs = 100, batch_size = 32)

ticker = ['GOOG']
# To Set up End and Start times for data grab
new_end = datetime.now() # need to reduce the day by 30
print(end)
end3 =end+ timedelta(-90)
print(end3)
start = datetime(end3.year ,end3.month,end3.day)
# Creating loop for grabing yahoo finance data and setting as a dataframe
for stock in ticker:   
#     #To set DataFrame as the Stock Ticker
    globals()[stock] = web.DataReader(stock,'yahoo',start,new_end)['Close']

test=GOOG.values 
test=np.reshape(test,(len(test),1))

inputs=test
inputs=sc.transform(inputs)
inputs=np.reshape(inputs,(len(test), 1 ,1 ))
ans=regressor.predict(inputs)
ans=sc.inverse_transform(ans)

train2=np.reshape(train2,(len(train2),1))
inputs=train2
inputs=sc.transform(inputs)
inputs=np.reshape(inputs,(len(train2), 1 ,1 ))  #batch size, timesteps, features
anst=regressor.predict(inputs)
anst=sc.inverse_transform(anst)
print(len(anst))
print(test[:20])

plt.plot(train2,color='blue',label='real stock prices')
plt.plot(anst,color='red',label='predicted stock prices')
plt.title("training stock market prediction using LSTM")
plt.xlabel("time")
plt.ylabel("prices in dollars")
plt.legend()
plt.show()

plt.plot(test,color='blue',label='real stock prices')
plt.plot(ans,color='red',label='predicted stock prices')
plt.title("stock market prediction using LSTM")
plt.xlabel("time")
plt.ylabel("prices in dollars")
plt.legend()
plt.show()

print("the next day price is ======  ", ans[len(ans)-1])

import math
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
rmse=math.sqrt(mean_squared_error(ans,test))
print("the mean squared error is ",rmse)
print("the r^2 error is ")
r2_score(test, ans,multioutput='variance_weighted')

# just trying some code
def pre(test):
  test=np.reshape(test,(len(test),1))
  inputs=test
  inputs=sc.transform(inputs)
  inputs=np.reshape(inputs,(len(test), 1 ,1 ))  #batch size, timesteps, features
  anst=regressor.predict(inputs)
  anst=sc.inverse_transform(anst)
  return anst

temp=test[0]
ans=[]
t=[temp]
for i in range(90):
 ans.append(pre(t[-1]))
 if i!=179:
   t.append(ans[-1])

print(len(t))
print(ans)
ans=np.array(ans).flatten()

plt.plot(test[:20],color='blue',label='real stock prices')
plt.plot(ans.reshape(-1,1)[:20],color='red',label='predicted stock prices')
plt.title("stock market prediction using LSTM")
plt.xlabel("time")
plt.ylabel("prices in dollars")
plt.legend()
plt.show()  #

print(ans)